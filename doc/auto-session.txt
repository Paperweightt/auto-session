AutoSession.setup({config})                                  *AutoSession.setup*
    Setup function for AutoSession

    Parameters: ~
        {config}  (AutoSession.Config|nil)  Config for auto session


AutoSession.session_exists_for_cwd()        *AutoSession.session_exists_for_cwd*
    Quickly checks if a session file exists for the current working directory.
    This is useful for starter plugins which don't want to display 'restore session'
    unless a session for the current working directory exists.

    Returns: ~
        (boolean)  if a session exists for the cwd


AutoSession.AutoSaveSession()                      *AutoSession.AutoSaveSession*
    AutoSaveSession
    Function called by auto_session to trigger auto_saving sessions, for example on VimExit events.

    Returns: ~
        (boolean)  if a session was saved


                                                *AutoSession.AutoRestoreSession*
AutoSession.AutoRestoreSession({session_name?})
    Function called by AutoSession when automatically restoring a session.

    Parameters: ~
        {session_name?}  (string)  An optional session to load

    Returns: ~
        (boolean)  returns whether restoring the session was successful or not.


AutoSession.PurgeOrphanedSessions()          *AutoSession.PurgeOrphanedSessions*
     Deletes sessions where the original directory no longer exists


                                                       *AutoSession.SaveSession*
AutoSession.SaveSession({session_name?}, {show_message?})
    Saves a session to the dir specified in the config. If no optional
    session name is passed in, it uses the cwd as the session name

    Parameters: ~
        {session_name?}  (string|nil)  Optional session name
        {show_message?}  (boolean)     Optional, whether to show a message on save (true by default)

    Returns: ~
        (boolean)


                                                  *AutoSession.SaveSessionToDir*
AutoSession.SaveSessionToDir({session_dir}, {session_name?}, {show_message?})
    Saves a session to the passed in directory. If no optional
    session name is passed in, it uses the cwd as the session name

    Parameters: ~
        {session_dir}    (string)      Directory to write the session file to
        {session_name?}  (string|nil)  Optional session name
        {show_message?}  (boolean)     Optional, whether to show a message on save (true by default)

    Returns: ~
        (boolean)


                                                    *AutoSession.RestoreSession*
AutoSession.RestoreSession({session_name?}, {show_message?})
    Restores a session from the passed in directory. If no optional session name
    is passed in, it uses the cwd as the session name

    Parameters: ~
        {session_name?}  (string|nil)  Optional session name
        {show_message?}  (boolean)     Optional, whether to show a message on restore (true by default)


                                             *AutoSession.RestoreSessionFromDir*
AutoSession.RestoreSessionFromDir({session_dir}, {session_name?}, {show_message?})
    Restores a session from the passed in directory. If no optional session name
    is passed in, it uses the cwd as the session name

    Parameters: ~
        {session_dir}    (string)      Directory to write the session file to
        {session_name?}  (string|nil)  Optional session name
        {show_message?}  (boolean)     Optional, whether to show a message on restore (true by default)


                                                *AutoSession.RestoreSessionFile*
AutoSession.RestoreSessionFile({session_path}, {show_message?})
    Restores a session from a specific file

    Parameters: ~
        {session_path}   (string)   The session file to load
        {show_message?}  (boolean)  Optional, whether to show a message on restore (true by default)

    Returns: ~
        (boolean)  a session restored


                                                     *AutoSession.DeleteSession*
AutoSession.DeleteSession({session_name?})
    Deletes a session from the config session dir. If no optional session name
    is passed in, it uses the cwd as the session name

    Parameters: ~
        {session_name?}  (string|nil)  Optional session name


                                              *AutoSession.DeleteSessionFromDir*
AutoSession.DeleteSessionFromDir({session_dir}, {session_name?})
    Deletes a session from the passed in directory. If no optional session
    name is passed in, it uses the cwd as the session name

    Parameters: ~
        {session_dir}    (string)      Directory to delete the session from
        {session_name?}  (string|nil)  Optional session name


                                                 *AutoSession.DeleteSessionFile*
AutoSession.DeleteSessionFile({session_path}, {session_name})
    Delete a session file

    Parameters: ~
        {session_path}  (string)  The filename to delete
        {session_name}  (string)  Session name being deleted, just use to display messages

    Returns: ~
        (boolean)  the session file delted


AutoSession.DisableAutoSave({enable?})             *AutoSession.DisableAutoSave*
    Disables autosave. Enables autosave if enable is true

    Parameters: ~
        {enable?}  (boolean)  Optional paramter to enable autosaving

    Returns: ~
        (boolean)  autosaving is enabled or not


                                                    *SessionLens.search_session*
SessionLens.search_session({custom_opts})
    Search session
    Triggers the customized telescope picker for switching sessions

    Parameters: ~
        {custom_opts}  (any)


vim:tw=78:ts=8:noet:ft=help:norl:
